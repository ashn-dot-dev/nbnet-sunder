import "c";
import "nbnet";
import "std";

let NAME = startof("pong");
let ADDR = startof("127.0.0.1");
let PORT = 31415u16;
let TICK_RATE = 60u;
let BUSY_CODE = (:sint)42;

let WINDOW_W: sint = 800;
let WINDOW_H: sint = 600;

let PADDLE_W = WINDOW_W / 60;
let PADDLE_H = WINDOW_H / 6;
let PADDLE_SPEED = 10.0f32;

let P1_PADDLE_X = PADDLE_W;
let P2_PADDLE_X = WINDOW_W - 2 * PADDLE_W;

let BALL_SIDE = PADDLE_W;
let BALL_SPEED = 8.0f32;

struct client_message {
    let DIRECTION_NONE: sint = 0;
    let DIRECTION_NEGATIVE_Y: sint = -1;
    let DIRECTION_POSITIVE_Y: sint = +1;
    var direction: sint;
    var is_served: bool;

    let TYPE: u8 = 0;

    func create() *client_message {
        return std::new[[client_message]]();
    }

    func destroy(self: *client_message) void {
        std::delete[[client_message]](self);
    }

    func serialize(self: *client_message, stream: *NBN_Stream) sint {
        stream.*.serialize_int_func(stream, &self.*.direction, -1, +1);
        stream.*.serialize_bool_func(stream, &self.*.is_served);
        return 0;
    }
}

struct server_message {
    var player: uint;
    var p1_paddle_y: f32;
    var p2_paddle_y: f32;
    var ball_x: f32;
    var ball_y: f32;
    var p1_score: uint;
    var p2_score: uint;
    var server: uint;

    let TYPE: u8 = 1;

    func create() *server_message {
        return std::new[[server_message]]();
    }

    func destroy(self: *server_message) void {
        std::delete[[server_message]](self);
    }

    func serialize(self: *server_message, stream: *NBN_Stream) sint {
        stream.*.serialize_uint_func(stream, &self.*.player, 1, 2);
        stream.*.serialize_float_func(stream, &self.*.p1_paddle_y, 0.0, (:float)WINDOW_H, 3);
        stream.*.serialize_float_func(stream, &self.*.p2_paddle_y, 0.0, (:float)WINDOW_H, 3);
        stream.*.serialize_float_func(stream, &self.*.ball_x, (:float)-BALL_SIDE, (:float)WINDOW_W, 3);
        stream.*.serialize_float_func(stream, &self.*.ball_y, (:float)-BALL_SIDE, (:float)WINDOW_H, 3);
        stream.*.serialize_uint_func(stream, &self.*.p1_score, 0, uint::MAX);
        stream.*.serialize_uint_func(stream, &self.*.p2_score, 0, uint::MAX);
        stream.*.serialize_uint_func(stream, &self.*.server, 0, 3);
        return 0;
    }
}

struct world_state {
    var p1_paddle_y: f32;
    var p2_paddle_y: f32;
    var ball_x: f32;
    var ball_y: f32;
    var ball_vx: f32;
    var ball_vy: f32;
    var p1_score: uint;
    var p2_score: uint;
    let SERVER_NONE: uint = 0;
    let SERVER_P1: uint = 1;
    let SERVER_P2: uint = 2;
    var server: uint;

    let INIT = (:world_state){
        .p1_paddle_y = (:f32)WINDOW_H / 2.0 - (:f32)PADDLE_H / 2.0,
        .p2_paddle_y = (:f32)WINDOW_H / 2.0 - (:f32)PADDLE_H / 2.0,
        .ball_x = (:f32)WINDOW_W / 2.0 - (:f32)BALL_SIDE / 2.0,
        .ball_y = (:f32)WINDOW_H / 2.0 - (:f32)BALL_SIDE / 2.0,
        .ball_vx = 0.0,
        .ball_vy = 0.0,
        .p1_score = 0,
        .p2_score = 0,
        .server = 1,
    };

    func to_server_message(self: *world_state, client: uint) server_message {
        return (:server_message){
            .player = client,
            .p1_paddle_y = self.*.p1_paddle_y,
            .p2_paddle_y = self.*.p2_paddle_y,
            .ball_x = self.*.ball_x,
            .ball_y = self.*.ball_y,
            .p1_score = self.*.p1_score,
            .p2_score = self.*.p2_score,
            .server = self.*.server,
        };
    }

    func update_from_server_message(self: *world_state, message: server_message) void {
        self.*.p1_paddle_y = message.p1_paddle_y;
        self.*.p2_paddle_y = message.p2_paddle_y;
        self.*.ball_x = message.ball_x;
        self.*.ball_y = message.ball_y;
        self.*.p1_score = message.p1_score;
        self.*.p2_score = message.p2_score;
        self.*.server = message.server;
    }
}
