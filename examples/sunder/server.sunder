import "c";
import "nbnet";
import "std";

import "shared.sunder";

func main() void {
    NBN_Driver_Init();
    NBN_GameServer_Init(NAME, PORT, false);

    NBN_GameServer_RegisterMessage(
        message::TYPE,
        (:NBN_MessageBuilder)message::create,
        (:NBN_MessageDestructor)message::destroy,
        (:NBN_MessageSerializer)message::serialize);

    if NBN_GameServer_Start() < 0 {
        std::print_line(std::err(), "error: failed to start the server");
        std::exit(std::EXIT_FAILURE);
    }

    let dt: double = 1.0 / (:double)TICK_RATE;
    var client = std::ptr[[NBN_Connection]]::NULL;
    for true {
        NBN_GameServer_AddTime(dt);

        var ev: sint = NBN_GameServer_Poll();
        for ev != NBN_NO_EVENT {
            if ev < 0 {
                std::print_line(std::err(), "error: failed to poll event");
                break;
            }

            if ev == NBN_NEW_CONNECTION {
                std::print_line(std::err(), "info: new connection");
                if (client != std::ptr[[NBN_Connection]]::NULL) {
                    NBN_GameServer_RejectIncomingConnectionWithCode(BUSY_CODE);
                }
                else {
                    client = NBN_GameServer_GetIncomingConnection();
                    NBN_GameServer_AcceptIncomingConnection();
                }
            }

            if ev == NBN_CLIENT_DISCONNECTED {
                std::print_line(std::err(), "info: disconnected");
                assert NBN_GameServer_GetDisconnectedClient().*.id == client.*.id;
                client = std::ptr[[NBN_Connection]]::NULL;
            }

            if ev == NBN_CLIENT_MESSAGE_RECEIVED {
                std::print_line(std::err(), "info: message received");

                var info = NBN_GameServer_GetMessageInfo();
                assert info.sender == client;
                assert info.type == message::TYPE;
                var incoming = (:*message)info.data;

                var data = incoming.*.data[0:(:usize)incoming.*.length];
                std::print_format_line(
                    std::err(),
                    "received message: \"{e}\" ({} bytes)",
                    (:[]std::formatter)[
                        std::formatter::init[[[]byte]](&data),
                        std::formatter::init[[uint]](&incoming.*.length)]);

                var outgoing = message::create();
                std::slice[[byte]]::copy(
                    outgoing.*.data[0:(:usize)incoming.*.length],
                    incoming.*.data[0:(:usize)incoming.*.length]);
                outgoing.*.length = incoming.*.length;
                NBN_GameServer_SendReliableMessageTo(client, message::TYPE, outgoing);
                message::destroy(incoming);
            }

            if NBN_GameServer_SendPackets() < 0 {
                std::print_line(std::err(), "error: failed to send packets");
                break;
            }

            ev = NBN_GameServer_Poll();
        }

        usleep((:uint)(dt * 1000000.0));
    }

    NBN_GameServer_Stop();
}
